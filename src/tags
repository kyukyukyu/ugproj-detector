!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ASSOC_INTERSECT	structure.hpp	/^  ASSOC_INTERSECT = 0,$/;"	e	enum:ugproj::AssociationMethod
ASSOC_OPTFLOW	structure.hpp	/^  ASSOC_OPTFLOW,$/;"	e	enum:ugproj::AssociationMethod
ASSOC_SIFT	structure.hpp	/^  ASSOC_SIFT,$/;"	e	enum:ugproj::AssociationMethod
Arguments	structure.hpp	/^struct Arguments {$/;"	s	namespace:ugproj
ArrayD	celiu-optflow/image_util_test.cc	/^typedef Eigen::ArrayXXd ArrayD;$/;"	t	namespace:__anon7	file:
ArrayF	celiu-optflow/image_pyramid.h	/^  typedef Eigen::ArrayXXf ArrayF;$/;"	t	class:rvslam::ImagePyramid
ArrayF	celiu-optflow/image_pyramid.h	/^  typedef Eigen::ArrayXXf ArrayF;$/;"	t	class:rvslam::ImagePyramidBuilder
ArrayF	celiu-optflow/image_pyramid_test.cc	/^typedef Eigen::ArrayXXf ArrayF;$/;"	t	namespace:__anon4	file:
ArrayF	celiu-optflow/image_util_test.cc	/^typedef Eigen::ArrayXXf ArrayF;$/;"	t	namespace:__anon7	file:
ArrayType	celiu-optflow/image.h	/^  typedef Eigen::Array<Scalar, Eigen::Dynamic, Eigen::Dynamic> ArrayType;$/;"	t	class:opticalflow::Image
ArrayType	celiu-optflow/image.h	/^  typedef Eigen::Array<Scalar, Eigen::Dynamic, Eigen::Dynamic> ArrayType;$/;"	t	class:opticalflow::MCImage
AssociationMethod	structure.hpp	/^enum AssociationMethod {$/;"	g	namespace:ugproj
At	celiu-optflow/image.h	/^  PixelConstRetType At(int x, int y) const { return this->col(colidx(x, y)); }$/;"	f	class:opticalflow::MCImage
At	celiu-optflow/image.h	/^  PixelConstRetType& At(int i) const { return this->col(i); }$/;"	f	class:opticalflow::MCImage
At	celiu-optflow/image.h	/^  PixelRetType At(int x, int y) { return this->col(colidx(x, y)); }$/;"	f	class:opticalflow::MCImage
At	celiu-optflow/image.h	/^  PixelRetType& At(int i) { return this->col(i); }$/;"	f	class:opticalflow::MCImage
At	celiu-optflow/image.h	/^  Scalar& At(int i) { return At(i % width(), i \/ width()); }$/;"	f	class:opticalflow::Image
At	celiu-optflow/image.h	/^  Scalar& At(int x, int y) { return BaseType::operator()(x, y); }$/;"	f	class:opticalflow::Image
At	celiu-optflow/image.h	/^  Scalar& At(int x, int y, int d) { return this->coeffRef(d, colidx(x, y)); }$/;"	f	class:opticalflow::MCImage
At	celiu-optflow/image.h	/^  const Scalar& At(int i) const { return At(i % width(), i \/ width()); }$/;"	f	class:opticalflow::Image
At	celiu-optflow/image.h	/^  const Scalar& At(int x, int y) const { return BaseType::operator()(x, y); }$/;"	f	class:opticalflow::Image
At	celiu-optflow/image.h	/^  const Scalar& At(int x, int y, int d) const {$/;"	f	class:opticalflow::MCImage
BGR	celiu-optflow/optical_flow.h	/^  enum ColorType { RGB, BGR };$/;"	e	enum:opticalflow::ColorType
BaseType	celiu-optflow/image.h	/^  typedef Eigen::Array<Scalar, DEPTH, SIZE> BaseType;$/;"	t	class:opticalflow::MCImage
BaseType	celiu-optflow/image.h	/^  typedef Eigen::Array<Scalar, WIDTH, HEIGHT> BaseType;$/;"	t	class:opticalflow::Image
BilinearInterpolate	celiu-optflow/optical_flow.cc	/^MCImageDoubleX OpticalFlow::BilinearInterpolate(const MCImageDoubleX& pImage,int width,int height, int nChannels,double x,double y) {$/;"	f	class:opticalflow::OpticalFlow
BilinearInterpolate	celiu-optflow/optical_flow.cc	/^void OpticalFlow::BilinearInterpolate(const MCImageDoubleX& pImage,int width,int height,int nChannels,double x,double y,MCImageDoubleX& result, int r, int c) {$/;"	f	class:opticalflow::OpticalFlow
Build	celiu-optflow/image_pyramid.h	/^  bool Build(const Eigen::ArrayBase<Pix>& image, ImagePyramid* pyr) const {$/;"	f	class:rvslam::ImagePyramidBuilder
Build	celiu-optflow/image_pyramid.h	/^bool ImagePyramid::Build(const Eigen::ArrayBase<Pix>& image, size_t num_levels,$/;"	f	class:rvslam::ImagePyramid
BuildGaussianKernel	celiu-optflow/image_util.h	/^void BuildGaussianKernel(double sigma, Kernel* kernel) {$/;"	f	namespace:opticalflow
BuildGaussianKernel1D	celiu-optflow/image_util.h	/^inline void BuildGaussianKernel1D(double sigma, Array2D* kernel,$/;"	f	namespace:opticalflow
Coarse2FineFlow	celiu-optflow/optical_flow.cc	/^void OpticalFlow::Coarse2FineFlow(MCImageDoubleX& vx, MCImageDoubleX& vy, MCImageDoubleX& warpI2, const MCImageDoubleX &Im1, const MCImageDoubleX &Im2, $/;"	f	class:opticalflow::OpticalFlow
Collapse	celiu-optflow/image.h	/^  void Collapse(Eigen::Array<T, Eigen::Dynamic, Eigen::Dynamic>* ret) const {$/;"	f	class:opticalflow::MCImage
ColorType	celiu-optflow/optical_flow.h	/^  enum ColorType { RGB, BGR };$/;"	g	namespace:opticalflow
ConstructPyramid	celiu-optflow/gaussian_pyramid.cc	/^void GaussianPyramid::ConstructPyramid(const MCImageDoubleX& image, double ratio, int minWidth) {$/;"	f	class:opticalflow::GaussianPyramid
ConvertFloatBuffer	celiu-optflow/image_file.cc	/^void ConvertFloatBuffer(const float* srcbuf, int num, bool adjust, T* dstbuf) {$/;"	f	namespace:opticalflow
ConvertFloatImageTo	celiu-optflow/image_file.cc	/^Image<T> ConvertFloatImageTo(const float* srcbuf, int w, int h, bool adjust) {$/;"	f	namespace:opticalflow
ConvertFloatImageToMC	celiu-optflow/image_file.cc	/^MCImage<T, D> ConvertFloatImageToMC(const float* srcbuf, int w, int h, int d,$/;"	f	namespace:opticalflow
ConvertImageBuffer	celiu-optflow/image_file.cc	/^const RawImageBuffer* ConvertImageBuffer(const RawImageBuffer& src,$/;"	f	namespace:opticalflow::__anon5
ConvertImageTo	celiu-optflow/image_file.cc	/^Image<uint16_t> ConvertImageTo(const Image<float>& src, int pixel_adjust) {$/;"	f	namespace:opticalflow
ConvertImageTo	celiu-optflow/image_file.cc	/^Image<uint8_t> ConvertImageTo(const Image<float>& src, int pixel_adjust) {$/;"	f	namespace:opticalflow
ConvertImageToMC	celiu-optflow/image_file.cc	/^MCImage<uint8_t, Dynamic> ConvertImageToMC(const MCImage<float, Dynamic>& src,$/;"	f	namespace:opticalflow
Convolve	celiu-optflow/image_util.h	/^void Convolve(const Eigen::DenseBase<Input>& image,$/;"	f	namespace:opticalflow
ConvolveImage	celiu-optflow/image_util.h	/^void ConvolveImage(const Input& image, const Kernel& kernel, Output* out) {$/;"	f	namespace:opticalflow
Copy	celiu-optflow/image.h	/^  MCImage& Copy(const MCImage<T, D, S>& image) {$/;"	f	class:opticalflow::MCImage
Copy	celiu-optflow/image_pyramid.h	/^  void Copy(const ImagePyramid& p) { levels_ = p.levels_; }$/;"	f	class:rvslam::ImagePyramid
CopyBuf	celiu-optflow/image_file.cc	/^void CopyBuf(const RawImageBuffer& src, int num, RawImageBuffer* dst) {$/;"	f	namespace:opticalflow::__anon5
CopyBufAdj	celiu-optflow/image_file.cc	/^void CopyBufAdj(const RawImageBuffer& src, int num, RawImageBuffer* dst) {$/;"	f	namespace:opticalflow::__anon5
CopyBufDown3	celiu-optflow/image_file.cc	/^void CopyBufDown3(const RawImageBuffer& src, int num, RawImageBuffer* dst) {$/;"	f	namespace:opticalflow::__anon5
CopyBufUp3	celiu-optflow/image_file.cc	/^void CopyBufUp3(const RawImageBuffer& src, int num, RawImageBuffer* dst) {$/;"	f	namespace:opticalflow::__anon5
DOUBLE_EPSILON	main.cpp	/^static const double DOUBLE_EPSILON = numeric_limits<double>::epsilon();$/;"	v	file:
DUMP_ARRAY	celiu-optflow/image_test.cc	22;"	d	file:
DUMP_IMAGE	celiu-optflow/image_test.cc	17;"	d	file:
DrawCircle	celiu-optflow/image_util.h	/^void DrawCircle(MCImage<T, DEPTH>& img, P x, P y, const S& c, int rad = 5) {$/;"	f	namespace:opticalflow
DrawDot	celiu-optflow/image_util.h	/^void DrawDot(MCImage<T, DEPTH>& img, P x, P y, const S& c, int rad = 1) {$/;"	f	namespace:opticalflow
DrawLine	celiu-optflow/image_util.h	/^void DrawLine(MCImage<T, DEPTH>& img, P x0, P y0, P x1, P y1,$/;"	f	namespace:opticalflow
DrawText	celiu-optflow/image_util.h	/^void DrawText(MCImage<T, DEPTH>& img, P x, P y, const S& c, const char *str) {$/;"	f	namespace:opticalflow
DrawTextFormat	celiu-optflow/image_util.h	/^void DrawTextFormat(MCImage<T, DEPTH>& img,$/;"	f	namespace:opticalflow
EIGEN_RUNTIME_NO_MALLOC	celiu-optflow/image_test.cc	4;"	d	file:
EXPECT_ARRAY_NEAR	celiu-optflow/image_util_test.cc	17;"	d	file:
EnforceRange	celiu-optflow/optical_flow.h	/^  static const int EnforceRange(const int& x, const int& MaxValue) { return min(max(x, 0), MaxValue - 1); };$/;"	f	class:opticalflow::OpticalFlow
FLOAT	celiu-optflow/image_file.cc	/^enum { GRAY8, GRAY16, RGB24, FLOAT, FLOAT3 };$/;"	e	enum:opticalflow::__anon5::__anon6	file:
FLOAT3	celiu-optflow/image_file.cc	/^enum { GRAY8, GRAY16, RGB24, FLOAT, FLOAT3 };$/;"	e	enum:opticalflow::__anon5::__anon6	file:
Face	structure.cpp	/^Face::Face(id_type id, const FaceCandidate& candidate): id(id) {$/;"	f	class:Face
Face	structure.hpp	/^    Face(id_type id) : id(id) {};$/;"	f	class:ugproj::Face
Face	structure.hpp	/^class Face {$/;"	c	namespace:ugproj
FaceAssociator	associator/associator.hpp	/^    FaceAssociator($/;"	f	class:ugproj::FaceAssociator
FaceAssociator	associator/associator.hpp	/^class FaceAssociator {$/;"	c	namespace:ugproj
FaceCandidate	structure.hpp	/^    FaceCandidate(const FaceCandidate& fc) {$/;"	f	class:ugproj::FaceCandidate
FaceCandidate	structure.hpp	/^    FaceCandidate(const temp_idx_t frameIndex, const cv::Rect& rect,$/;"	f	class:ugproj::FaceCandidate
FaceCandidate	structure.hpp	/^class FaceCandidate {$/;"	c	namespace:ugproj
FaceCandidateList	structure.hpp	/^typedef std::vector<FaceCandidate> FaceCandidateList;$/;"	t	namespace:ugproj
FaceDetector	detector/detector.hpp	/^            FaceDetector(cv::CascadeClassifier& cascade):$/;"	f	class:ugproj::FaceDetector
FaceDetector	detector/detector.hpp	/^    class FaceDetector {$/;"	c	namespace:ugproj
FaceTracker	face_tracker.cc	/^FaceTracker::FaceTracker() {$/;"	f	class:ugproj::FaceTracker
FaceTracker	face_tracker.h	/^class FaceTracker {$/;"	c	namespace:ugproj
FileInput	file_io.h	/^class FileInput {$/;"	c	namespace:ugproj
FileWriter	file_io.h	/^class FileWriter {$/;"	c	namespace:ugproj
Fit	associator/associator.hpp	/^    struct Fit {$/;"	s	class:ugproj::KltFaceAssociator
Fit	associator/associator.hpp	/^    struct Fit {$/;"	s	class:ugproj::SiftFaceAssociator
FromArray	celiu-optflow/image.h	/^  void FromArray(const ArrayType& array, int width, int height) {$/;"	f	class:opticalflow::Image
FromArray	celiu-optflow/image.h	/^  void FromArray(const ArrayType& array, int width, int height) {$/;"	f	class:opticalflow::MCImage
FromBuffer	celiu-optflow/image.h	/^  void FromBuffer(const void* buf, int w, int h, int d) {$/;"	f	class:opticalflow::MCImage
FromBuffer	celiu-optflow/image.h	/^  void FromBuffer(const void* buf, int width, int height) {$/;"	f	class:opticalflow::Image
GRAY16	celiu-optflow/image_file.cc	/^enum { GRAY8, GRAY16, RGB24, FLOAT, FLOAT3 };$/;"	e	enum:opticalflow::__anon5::__anon6	file:
GRAY8	celiu-optflow/image_file.cc	/^enum { GRAY8, GRAY16, RGB24, FLOAT, FLOAT3 };$/;"	e	enum:opticalflow::__anon5::__anon6	file:
GaussianPyramid	celiu-optflow/gaussian_pyramid.cc	/^GaussianPyramid::GaussianPyramid(void) {$/;"	f	class:opticalflow::GaussianPyramid
GaussianPyramid	celiu-optflow/gaussian_pyramid.h	/^class GaussianPyramid$/;"	c	namespace:opticalflow
GaussianSmoothing	celiu-optflow/gaussian_pyramid.cc	/^void GaussianPyramid::GaussianSmoothing(MCImageDoubleX& image, const MCImageDoubleX& target, double sigma, int fsize) {$/;"	f	class:opticalflow::GaussianPyramid
GaussianSmoothing	celiu-optflow/image_util.h	/^void GaussianSmoothing(const Eigen::DenseBase<Array2D>& image, double sigma,$/;"	f	namespace:opticalflow
GaussianSmoothingImage	celiu-optflow/image_util.h	/^void GaussianSmoothingImage(const Input& image, double sigma,$/;"	f	namespace:opticalflow
GetBlock	celiu-optflow/image.h	/^  Image GetBlock(int x, int y, int w, int h) const {$/;"	f	class:opticalflow::Image
GetBlock	celiu-optflow/image.h	/^  MCImage GetBlock(int x, int y, int w, int h) const {$/;"	f	class:opticalflow::MCImage
GetFileExtension	celiu-optflow/image_file.cc	/^string GetFileExtension(const string& filepath) {$/;"	f	namespace:opticalflow::__anon5
GetPlane	celiu-optflow/image.h	/^  ArrayType GetPlane(int ch = 0) const {$/;"	f	class:opticalflow::MCImage
GetResizedSize_	celiu-optflow/image_util.h	/^inline int GetResizedSize_(int w, double ratio) { return ceil(w * ratio); }$/;"	f	namespace:opticalflow
Gray8ToRGB8	celiu-optflow/image.h	/^inline void Gray8ToRGB8(const ImageGray8& gray, MCImageRGB8* rgb) {$/;"	f	namespace:opticalflow
Gray8ToRGB8	celiu-optflow/image.h	/^inline void Gray8ToRGB8(const MCImageGray8& gray, MCImageRGB8* rgb) {$/;"	f	namespace:opticalflow
INIT_VAL_MAX	optflow/flow_to_color.cpp	10;"	d	file:
INIT_VAL_MIN	optflow/flow_to_color.cpp	11;"	d	file:
Image	celiu-optflow/gaussian_pyramid.h	/^  inline MCImageDoubleX& Image(int index) { return img_pyramid[index]; };$/;"	f	class:opticalflow::GaussianPyramid
Image	celiu-optflow/image.h	/^  Image() : BaseType() {}$/;"	f	class:opticalflow::Image
Image	celiu-optflow/image.h	/^  Image(const Eigen::Array<Scalar, W, H>& image) : BaseType(image) {}$/;"	f	class:opticalflow::Image
Image	celiu-optflow/image.h	/^  Image(int width, int height) : BaseType(width, height) {}$/;"	f	class:opticalflow::Image
Image	celiu-optflow/image.h	/^class Image : public Eigen::Array<SC, WIDTH, HEIGHT> {$/;"	c	namespace:opticalflow
ImageDouble	celiu-optflow/image.h	/^typedef Image<double> ImageDouble;$/;"	t	namespace:opticalflow
ImageFloat	celiu-optflow/image.h	/^typedef Image<float> ImageFloat;$/;"	t	namespace:opticalflow
ImageGray16	celiu-optflow/image.h	/^typedef Image<uint16_t> ImageGray16;$/;"	t	namespace:opticalflow
ImageGray32	celiu-optflow/image.h	/^typedef Image<uint32_t> ImageGray32;$/;"	t	namespace:opticalflow
ImageGray8	celiu-optflow/image.h	/^typedef Image<uint8_t> ImageGray8;$/;"	t	namespace:opticalflow
ImageLong	celiu-optflow/image.h	/^typedef Image<long> ImageLong;$/;"	t	namespace:opticalflow
ImagePyramid	celiu-optflow/image_pyramid.h	/^  ImagePyramid() : levels_() {}$/;"	f	class:rvslam::ImagePyramid
ImagePyramid	celiu-optflow/image_pyramid.h	/^  ImagePyramid(const ImagePyramid& p) : levels_(p.levels_) {}$/;"	f	class:rvslam::ImagePyramid
ImagePyramid	celiu-optflow/image_pyramid.h	/^class ImagePyramid {$/;"	c	namespace:rvslam
ImagePyramidBuilder	celiu-optflow/image_pyramid.h	/^ImagePyramidBuilder::ImagePyramidBuilder($/;"	f	class:rvslam::ImagePyramidBuilder
ImagePyramidBuilder	celiu-optflow/image_pyramid.h	/^class ImagePyramidBuilder {$/;"	c	namespace:rvslam
ImageShort	celiu-optflow/image.h	/^typedef Image<short> ImageShort;$/;"	t	namespace:opticalflow
Interp2	celiu-optflow/image_util.h	/^typename Array2D::Scalar Interp2(const Eigen::DenseBase<Array2D>& image,$/;"	f	namespace:opticalflow
Interp2Image	celiu-optflow/image_util.h	/^typename Image::PixelType Interp2Image(const Image& image, double x, double y) {$/;"	f	namespace:opticalflow
Interp2Patch	celiu-optflow/image_util.h	/^void Interp2Patch(const Eigen::DenseBase<Array2D>& image, T x, T y,$/;"	f	namespace:opticalflow
Interp2_	celiu-optflow/image_util.h	/^Pixel Interp2_(const Image& image, int w, int h, double x, double y) {$/;"	f	namespace:opticalflow
IntersectionFaceAssociator	associator/associator.hpp	/^    IntersectionFaceAssociator($/;"	f	class:ugproj::IntersectionFaceAssociator
IntersectionFaceAssociator	associator/associator.hpp	/^class IntersectionFaceAssociator : public FaceAssociator {$/;"	c	namespace:ugproj
KltFaceAssociator	associator/associator.cpp	/^KltFaceAssociator::KltFaceAssociator($/;"	f	class:KltFaceAssociator
KltFaceAssociator	associator/associator.hpp	/^class KltFaceAssociator : public FaceAssociator {$/;"	c	namespace:ugproj
LapPara	celiu-optflow/optical_flow.cc	/^MCImageDoubleX OpticalFlow::LapPara;$/;"	m	class:opticalflow::OpticalFlow	file:
LapPara	celiu-optflow/optical_flow.h	/^  static MCImageDoubleX LapPara;$/;"	m	class:opticalflow::OpticalFlow
Laplacian	celiu-optflow/optical_flow.cc	/^void OpticalFlow::Laplacian(MCImageDoubleX& output, const MCImageDoubleX& input, const MCImageDoubleX& weight) {$/;"	f	class:opticalflow::OpticalFlow
Level	celiu-optflow/image_pyramid.h	/^  struct Level {$/;"	s	class:rvslam::ImagePyramid
MAXCOLS	optflow/colorcode.cpp	15;"	d	file:
MCImage	celiu-optflow/image.h	/^  MCImage() : BaseType(), width_(0), height_(0) {}$/;"	f	class:opticalflow::MCImage
MCImage	celiu-optflow/image.h	/^  MCImage(const MCImage<Scalar, D, S>& image)$/;"	f	class:opticalflow::MCImage
MCImage	celiu-optflow/image.h	/^  MCImage(int width, int height, int depth = 1)$/;"	f	class:opticalflow::MCImage
MCImage	celiu-optflow/image.h	/^class MCImage : public Eigen::Array<_Scalar, DEPTH, SIZE> {$/;"	c	namespace:opticalflow
MCImageDouble	celiu-optflow/optical_flow.h	/^  typedef MCImage<double, 1> MCImageDouble;$/;"	t	namespace:opticalflow
MCImageDouble3	celiu-optflow/optical_flow.h	/^  typedef MCImage<double, 3> MCImageDouble3;$/;"	t	namespace:opticalflow
MCImageDoubleX	celiu-optflow/gaussian_pyramid.h	/^typedef MCImage<double, Eigen::Dynamic> MCImageDoubleX;$/;"	t	namespace:opticalflow
MCImageDoubleX	celiu-optflow/image_util.h	/^typedef MCImage<double, Eigen::Dynamic> MCImageDoubleX;$/;"	t	namespace:opticalflow
MCImageDoubleX	celiu-optflow/optical_flow.h	/^  typedef MCImage<double, Eigen::Dynamic> MCImageDoubleX;$/;"	t	namespace:opticalflow
MCImageFloat	celiu-optflow/image.h	/^typedef MCImage<float, 1> MCImageFloat;$/;"	t	namespace:opticalflow
MCImageFloatX	celiu-optflow/image.h	/^typedef MCImage<float, Eigen::Dynamic> MCImageFloatX;$/;"	t	namespace:opticalflow
MCImageGray16	celiu-optflow/image.h	/^typedef MCImage<uint16_t, 1> MCImageGray16;$/;"	t	namespace:opticalflow
MCImageGray8	celiu-optflow/image.h	/^typedef MCImage<uint8_t, 1> MCImageGray8;$/;"	t	namespace:opticalflow
MCImageRGB8	celiu-optflow/image.h	/^typedef MCImage<uint8_t, 3> MCImageRGB8;$/;"	t	namespace:opticalflow
MCImageShort	celiu-optflow/image.h	/^typedef MCImage<short, 1> MCImageShort;$/;"	t	namespace:opticalflow
MCImageShortX	celiu-optflow/image.h	/^typedef MCImage<short, Eigen::Dynamic> MCImageShortX;$/;"	t	namespace:opticalflow
MCImageU16X	celiu-optflow/image.h	/^typedef MCImage<uint16_t, Eigen::Dynamic> MCImageU16X;$/;"	t	namespace:opticalflow
MCImageU32X	celiu-optflow/image.h	/^typedef MCImage<uint32_t, Eigen::Dynamic> MCImageU32X;$/;"	t	namespace:opticalflow
MCImageU8X	celiu-optflow/image.h	/^typedef MCImage<uint8_t, Eigen::Dynamic> MCImageU8X;$/;"	t	namespace:opticalflow
MakePixel	celiu-optflow/image.h	/^  static PixelType MakePixel(const Scalar& v) {$/;"	f	class:opticalflow::MCImage
MakePixel	celiu-optflow/image.h	/^  static PixelType MakePixel(const Scalar& v0, const Scalar& v1) {$/;"	f	class:opticalflow::MCImage
MakePixel	celiu-optflow/image.h	/^  static PixelType MakePixel(const Scalar& v0, const Scalar& v1, $/;"	f	class:opticalflow::MCImage
MakePixel	celiu-optflow/image.h	/^  static PixelType MakePixel(const Scalar& v0, const Scalar& v1,$/;"	f	class:opticalflow::MCImage
MakePixelRGB8	celiu-optflow/image.h	/^inline MCImageRGB8::PixelType MakePixelRGB8(uint8_t r, uint8_t g, uint8_t b) {$/;"	f	namespace:opticalflow
Match	associator/associator.hpp	/^    typedef std::pair<cv::Point2d, cv::Point2d> Match;$/;"	t	class:ugproj::KltFaceAssociator
MatchCompare	associator/associator.hpp	/^    struct MatchCompare {$/;"	s	class:ugproj::KltFaceAssociator
MatchPointSelection	associator/associator.hpp	/^    enum MatchPointSelection {$/;"	g	class:ugproj::KltFaceAssociator
MatchSet	associator/associator.hpp	/^    typedef std::set<Match, MatchCompare> MatchSet;$/;"	t	class:ugproj::KltFaceAssociator
Mult	celiu-optflow/optical_flow.cc	/^const MCImageDoubleX OpticalFlow::Mult(const MCImageDoubleX& im1, const MCImageDoubleX& im2, const MCImageDoubleX& im3) {$/;"	f	class:opticalflow::OpticalFlow
OptFlowArray	structure.hpp	/^typedef opticalflow::MCImageDoubleX OptFlowArray;$/;"	t	namespace:ugproj
OpticalFlow	celiu-optflow/optical_flow.h	/^  OpticalFlow() {}$/;"	f	class:opticalflow::OpticalFlow
OpticalFlow	celiu-optflow/optical_flow.h	/^class OpticalFlow$/;"	c	namespace:opticalflow
OpticalFlowFaceAssociator	associator/associator.cpp	/^OpticalFlowFaceAssociator::OpticalFlowFaceAssociator($/;"	f	class:OpticalFlowFaceAssociator
OpticalFlowFaceAssociator	associator/associator.hpp	/^class OpticalFlowFaceAssociator : public FaceAssociator {$/;"	c	namespace:ugproj
OpticalFlowManager	optflow/manager.cpp	/^OpticalFlowManager::OpticalFlowManager(int flowWidth, int flowHeight) :$/;"	f	class:OpticalFlowManager
OpticalFlowManager	optflow/manager.hpp	/^    class OpticalFlowManager {$/;"	c	namespace:ugproj
PIXEL_NO_ADJUST	celiu-optflow/image_file.h	/^  PIXEL_NO_ADJUST, PIXEL_TYPE_ADJUST,$/;"	e	enum:opticalflow::__anon3
PIXEL_TYPE_ADJUST	celiu-optflow/image_file.h	/^  PIXEL_NO_ADJUST, PIXEL_TYPE_ADJUST,$/;"	e	enum:opticalflow::__anon3
PixelConstRetType	celiu-optflow/image.h	/^  typedef typename BaseType::ConstColXpr PixelConstRetType;$/;"	t	class:opticalflow::MCImage
PixelRetType	celiu-optflow/image.h	/^  typedef typename BaseType::ColXpr PixelRetType;$/;"	t	class:opticalflow::MCImage
PixelType	celiu-optflow/image.h	/^  typedef Eigen::Array<Scalar, DEPTH, 1> PixelType;$/;"	t	class:opticalflow::MCImage
PixelType	celiu-optflow/image.h	/^  typedef Scalar PixelType;$/;"	t	class:opticalflow::Image
RGB	celiu-optflow/optical_flow.h	/^  enum ColorType { RGB, BGR };$/;"	e	enum:opticalflow::ColorType
RGB24	celiu-optflow/image_file.cc	/^enum { GRAY8, GRAY16, RGB24, FLOAT, FLOAT3 };$/;"	e	enum:opticalflow::__anon5::__anon6	file:
RGB8ToGray	celiu-optflow/image.h	/^inline void RGB8ToGray(const MCImageRGB8& rgb, Image<T>* gray) {$/;"	f	namespace:opticalflow
RGB8ToGray8	celiu-optflow/image.h	/^inline void RGB8ToGray8(const MCImageRGB8& rgb, ImageGray8* gray) {$/;"	f	namespace:opticalflow
RGB8ToGray8	celiu-optflow/image.h	/^inline void RGB8ToGray8(const MCImageRGB8& rgb, MCImageGray8* gray) {$/;"	f	namespace:opticalflow
RawImageBuffer	celiu-optflow/image_file.cc	/^  RawImageBuffer() : data(), pixfmt(GRAY8), width(0), height(0), pitch(0) {}$/;"	f	struct:opticalflow::__anon5::RawImageBuffer
RawImageBuffer	celiu-optflow/image_file.cc	/^struct RawImageBuffer {$/;"	s	namespace:opticalflow::__anon5	file:
ReadImage	celiu-optflow/image_file.cc	/^bool ReadImage<float, 1>(const string& path, MCImage<float, 1>* img, int padj) {$/;"	f	namespace:opticalflow
ReadImage	celiu-optflow/image_file.cc	/^bool ReadImage<float, 3>(const string& path, MCImage<float, 3>* img, int padj) {$/;"	f	namespace:opticalflow
ReadImage	celiu-optflow/image_file.cc	/^bool ReadImage<float, Dynamic>(const string& path, MCImage<float, Dynamic>* img,$/;"	f	namespace:opticalflow
ReadImage	celiu-optflow/image_file.cc	/^bool ReadImage<float>(const string& path, Image<float>* img, int pixel_adj) {$/;"	f	namespace:opticalflow
ReadImage	celiu-optflow/image_file.cc	/^bool ReadImage<uint16_t, 1>(const string& filepath, MCImage<uint16_t, 1>* image,$/;"	f	namespace:opticalflow
ReadImage	celiu-optflow/image_file.cc	/^bool ReadImage<uint16_t, Dynamic>(const string& path,$/;"	f	namespace:opticalflow
ReadImage	celiu-optflow/image_file.cc	/^bool ReadImage<uint16_t>(const string& filepath, Image<uint16_t>* image,$/;"	f	namespace:opticalflow
ReadImage	celiu-optflow/image_file.cc	/^bool ReadImage<uint8_t, 1>(const string& filepath, MCImage<uint8_t, 1>* image,$/;"	f	namespace:opticalflow
ReadImage	celiu-optflow/image_file.cc	/^bool ReadImage<uint8_t, 3>(const string& filepath, MCImage<uint8_t, 3>* image,$/;"	f	namespace:opticalflow
ReadImage	celiu-optflow/image_file.cc	/^bool ReadImage<uint8_t, Dynamic>(const string& path,$/;"	f	namespace:opticalflow
ReadImage	celiu-optflow/image_file.cc	/^bool ReadImage<uint8_t>(const string& filepath, Image<uint8_t>* image,$/;"	f	namespace:opticalflow
ReadImageTmpl	celiu-optflow/image_file.cc	/^bool ReadImageTmpl(const string& filepath, bool typeadj, Image<T>* image) {$/;"	f	namespace:opticalflow
ReadMCImageFloatTmpl	celiu-optflow/image_file.cc	/^bool ReadMCImageFloatTmpl(const string& filepath, bool typeadj,$/;"	f	namespace:opticalflow
ReadMCImageTmpl	celiu-optflow/image_file.cc	/^bool ReadMCImageTmpl(const string& filepath, bool typeadj,$/;"	f	namespace:opticalflow
ReadRawImageBufferFromFile	celiu-optflow/image_file.cc	/^inline bool ReadRawImageBufferFromFile(const string& filepath,$/;"	f	namespace:opticalflow::__anon5
ReadRawImageBufferFromPNG	celiu-optflow/image_file.cc	/^bool ReadRawImageBufferFromPNG(const string& filepath, RawImageBuffer* imgbuf) {$/;"	f	namespace:opticalflow::__anon5
ReduceSize	celiu-optflow/image_util.h	/^void ReduceSize(const Eigen::DenseBase<Input>& image,$/;"	f	namespace:opticalflow
ReduceSize	celiu-optflow/image_util.h	/^void ReduceSize(const MCImage<Input, DEPTH>& image,$/;"	f	namespace:opticalflow
Resize	celiu-optflow/image.h	/^  void Resize(int width, int height) { BaseType::resize(width, height); }$/;"	f	class:opticalflow::Image
Resize	celiu-optflow/image.h	/^  void Resize(int width, int height) { resize(width, height); }$/;"	f	class:opticalflow::MCImage
Resize	celiu-optflow/image.h	/^  void Resize(int width, int height, int depth) {$/;"	f	class:opticalflow::Image
Resize	celiu-optflow/image.h	/^  void Resize(int width, int height, int depth) {$/;"	f	class:opticalflow::MCImage
Resize	celiu-optflow/image_util.h	/^void Resize(const Eigen::DenseBase<Array2D>& image, Array2D* out) {$/;"	f	namespace:opticalflow
Resize	celiu-optflow/image_util.h	/^void Resize(const Eigen::DenseBase<Array2D>& image, double ratio,$/;"	f	namespace:opticalflow
Resize	celiu-optflow/image_util.h	/^void Resize(const Eigen::DenseBase<Array2D>& image,$/;"	f	namespace:opticalflow
ResizeImage	celiu-optflow/image_util.h	/^void ResizeImage(const Image& image, Image* out) {$/;"	f	namespace:opticalflow
ResizeImage	celiu-optflow/image_util.h	/^void ResizeImage(const Image& image, double ratio, Image* out) {$/;"	f	namespace:opticalflow
ResizeImage	celiu-optflow/image_util.h	/^void ResizeImage(const Image& image, double x_ratio, double y_ratio,$/;"	f	namespace:opticalflow
ResizeImage	celiu-optflow/optical_flow.cc	/^void OpticalFlow::ResizeImage(const MCImageDoubleX& pSrcImage,MCImageDoubleX& pDstImage, int dstWidth, int dstHeight) {$/;"	f	class:opticalflow::OpticalFlow
ResizeImage	celiu-optflow/optical_flow.cc	/^void OpticalFlow::ResizeImage(const MCImageDoubleX& pSrcImage,MCImageDoubleX& pDstImage,double Ratio) {$/;"	f	class:opticalflow::OpticalFlow
Resize_	celiu-optflow/image_util.h	/^void Resize_(const Input& image, int w0, int h0, int w, int h,$/;"	f	namespace:opticalflow
SafeInterp2	celiu-optflow/image_util.h	/^typename Array2D::Scalar SafeInterp2(const Eigen::DenseBase<Array2D>& image,$/;"	f	namespace:opticalflow
SafeInterp2Image	celiu-optflow/image_util.h	/^typename Image::PixelType SafeInterp2Image(const Image& image,$/;"	f	namespace:opticalflow
SavePyramid	celiu-optflow/gaussian_pyramid.cc	/^void GaussianPyramid::SavePyramid() {$/;"	f	class:opticalflow::GaussianPyramid
Scalar	celiu-optflow/image.h	/^  typedef SC Scalar;$/;"	t	class:opticalflow::Image
Scalar	celiu-optflow/image.h	/^  typedef _Scalar Scalar;$/;"	t	class:opticalflow::MCImage
SetAllPlanes	celiu-optflow/image.h	/^  void SetAllPlanes(const ArrayType& gray_image) {$/;"	f	class:opticalflow::MCImage
SetBlock	celiu-optflow/image.h	/^  void SetBlock(int x, int y, const Image& img) {$/;"	f	class:opticalflow::Image
SetBlock	celiu-optflow/image.h	/^  void SetBlock(int x, int y, const MCImage& img) {$/;"	f	class:opticalflow::MCImage
SetPlane	celiu-optflow/image.h	/^  void SetPlane(int ch, const ArrayType& gray_image) {$/;"	f	class:opticalflow::MCImage
SiftFaceAssociator	associator/associator.cpp	/^SiftFaceAssociator::SiftFaceAssociator(std::vector<Face>& faces,$/;"	f	class:SiftFaceAssociator
SiftFaceAssociator	associator/associator.hpp	/^class SiftFaceAssociator : public FaceAssociator {$/;"	c	namespace:ugproj
SmoothFlowSOR	celiu-optflow/optical_flow.cc	/^void OpticalFlow::SmoothFlowSOR(const MCImageDoubleX &Im1, const MCImageDoubleX &Im2, MCImageDoubleX& warpIm2, MCImageDoubleX& u, MCImageDoubleX& v,$/;"	f	class:opticalflow::OpticalFlow
SparseOptflow	structure.hpp	/^struct SparseOptflow {$/;"	s	namespace:ugproj
StringPrintf	celiu-optflow/image_file.h	/^inline std::string StringPrintf(const std::string fmt, ...) {$/;"	f	namespace:opticalflow
Swap	celiu-optflow/image.h	/^  void Swap(Image* image) { BaseType::swap(*image); }$/;"	f	class:opticalflow::Image
Swap	celiu-optflow/image.h	/^  void Swap(MCImage* image) { swap(image); }$/;"	f	class:opticalflow::MCImage
Swap	celiu-optflow/image_pyramid.h	/^  void Swap(ImagePyramid* p) { levels_.swap(p->levels_); }$/;"	f	class:rvslam::ImagePyramid
TEST	celiu-optflow/image_file_test.cc	/^TEST(ImageFileTest, TestReadImageFloat) {$/;"	f	namespace:__anon8
TEST	celiu-optflow/image_file_test.cc	/^TEST(ImageFileTest, TestReadImageGray16) {$/;"	f	namespace:__anon8
TEST	celiu-optflow/image_file_test.cc	/^TEST(ImageFileTest, TestReadImageGray8) {$/;"	f	namespace:__anon8
TEST	celiu-optflow/image_file_test.cc	/^TEST(ImageFileTest, TestReadImageRGB8) {$/;"	f	namespace:__anon8
TEST	celiu-optflow/image_pyramid_test.cc	/^TEST(ImagePyramidTest, TestImagePyramid) {$/;"	f	namespace:__anon4
TEST	celiu-optflow/image_test.cc	/^TEST(ImageTest, TestFloatImage) {$/;"	f	namespace:__anon2
TEST	celiu-optflow/image_test.cc	/^TEST(ImageTest, TestImage) {$/;"	f	namespace:__anon2
TEST	celiu-optflow/image_test.cc	/^TEST(MCImageTest, TestMCImage) {$/;"	f	namespace:__anon2
TEST	celiu-optflow/image_util_test.cc	/^TEST(ImageUtilTest, FontHelloWorld) {$/;"	f	namespace:__anon7
TEST	celiu-optflow/image_util_test.cc	/^TEST(ImageUtilTest, FontMapDump) {$/;"	f	namespace:__anon7
TEST	celiu-optflow/image_util_test.cc	/^TEST(ImageUtilTest, TestBuildGaussianKernel) {$/;"	f	namespace:__anon7
TEST	celiu-optflow/image_util_test.cc	/^TEST(ImageUtilTest, TestConvolve) {$/;"	f	namespace:__anon7
TEST	celiu-optflow/image_util_test.cc	/^TEST(ImageUtilTest, TestResize) {$/;"	f	namespace:__anon7
TestGaussianKernel	celiu-optflow/image_util_test.cc	/^void TestGaussianKernel(const ArrayF& kernel, const double sigma) {$/;"	f	namespace:__anon7
ToArray	celiu-optflow/image.h	/^  BaseType ToArray() const { return *this; }$/;"	f	class:opticalflow::MCImage
ToArray	celiu-optflow/image.h	/^  BaseType ToArray() const {$/;"	f	class:opticalflow::Image
UGPROJ_ASSOCIATOR_HEADER	associator/associator.hpp	2;"	d
UGPROJ_ASSOCIATOR_SIFT_SCALE_THRESHOLD	associator/associator.hpp	5;"	d
UGPROJ_ASSOCIATOR_SIFT_TRIAL_COUNT	associator/associator.hpp	4;"	d
UGPROJ_DETECTOR_HEADER	detector/detector.hpp	2;"	d
UGPROJ_FACETRACKER_H_	face_tracker.h	2;"	d
UGPROJ_FILEIO_H_	file_io.h	2;"	d
UGPROJ_OPTFLOW_FLOW2COLOR_HEADER	optflow/flow_to_color.hpp	2;"	d
UGPROJ_OPTFLOW_MANAGER_HEADER	optflow/manager.hpp	2;"	d
UGPROJ_STRUCTURE_HEADER	structure.hpp	2;"	d
UGPROJ_SUPPRESS_CELIU	face_tracker.cc	1;"	d	file:
UGPROJ_SUPPRESS_CELIU	face_tracker.h	3;"	d
UGPROJ_SUPPRESS_CELIU	file_io.h	3;"	d
UGPROJ_SUPPRESS_CELIU	lucas_kanade.cc	1;"	d	file:
UNKNOWN_FLOW_THRESHOLD	optflow/flow_to_color.cpp	9;"	d	file:
VideoProperties	face_tracker.h	/^    struct VideoProperties {$/;"	s	class:ugproj::FaceTracker
WriteImage	celiu-optflow/image_file.cc	/^bool WriteImage<uint16_t, 1>(const MCImage<uint16_t, 1>& image,$/;"	f	namespace:opticalflow
WriteImage	celiu-optflow/image_file.cc	/^bool WriteImage<uint16_t, Dynamic>($/;"	f	namespace:opticalflow
WriteImage	celiu-optflow/image_file.cc	/^bool WriteImage<uint16_t>(const Image<uint16_t>& image, const string& filepath,$/;"	f	namespace:opticalflow
WriteImage	celiu-optflow/image_file.cc	/^bool WriteImage<uint8_t, 1>(const MCImage<uint8_t, 1>& image,$/;"	f	namespace:opticalflow
WriteImage	celiu-optflow/image_file.cc	/^bool WriteImage<uint8_t, 3>(const MCImage<uint8_t, 3>& image,$/;"	f	namespace:opticalflow
WriteImage	celiu-optflow/image_file.cc	/^bool WriteImage<uint8_t, Dynamic>($/;"	f	namespace:opticalflow
WriteImage	celiu-optflow/image_file.cc	/^bool WriteImage<uint8_t>(const Image<uint8_t>& image, const string& filepath,$/;"	f	namespace:opticalflow
WriteImageTmpl	celiu-optflow/image_file.cc	/^bool WriteImageTmpl(const Image<T>& image, const string& filepath) {$/;"	f	namespace:opticalflow
WriteMCImageTmpl	celiu-optflow/image_file.cc	/^bool WriteMCImageTmpl(const MCImage<T, D>& image, const string& filepath) {$/;"	f	namespace:opticalflow
WriteRawImageBufferToFile	celiu-optflow/image_file.cc	/^inline bool WriteRawImageBufferToFile(const void* data, int pixfmt,$/;"	f	namespace:opticalflow::__anon5
WriteRawImageBufferToPNG	celiu-optflow/image_file.cc	/^bool WriteRawImageBufferToPNG(const void* data, int pixfmt,$/;"	f	namespace:opticalflow::__anon5
_GAUSSIANPYRAMID_H_	celiu-optflow/gaussian_pyramid.h	2;"	d
_OPTICAL_FLOW_H_	celiu-optflow/optical_flow.h	2;"	d
_RVSLAM_IMAGE_FILE_H_	celiu-optflow/image_file.h	6;"	d
_RVSLAM_IMAGE_H_	celiu-optflow/image.h	9;"	d
_RVSLAM_IMAGE_PYRAMID_H_	celiu-optflow/image_pyramid.h	6;"	d
_RVSLAM_IMAGE_UTIL_H_	celiu-optflow/image_util.h	7;"	d
_STRFMT	celiu-optflow/image_util.h	377;"	d
_g_fontimgdata	celiu-optflow/image_util.cc	/^uint8_t _g_fontimgdata[] = {$/;"	m	namespace:opticalflow	file:
add	celiu-optflow/optical_flow.cc	/^void OpticalFlow::add(MCImageDoubleX& img1, MCImageDoubleX& img2, MCImageDoubleX& result) {$/;"	f	class:opticalflow::OpticalFlow
add	celiu-optflow/optical_flow.cc	/^void OpticalFlow::add(double val, MCImageDoubleX& img, MCImageDoubleX& result) {$/;"	f	class:opticalflow::OpticalFlow
addCandidate	structure.cpp	/^void Face::addCandidate(const FaceCandidate& candidate) {$/;"	f	class:Face
append	optflow/manager.cpp	/^void OpticalFlowManager::append(OpticalFlowManager::flow_t* flow) {$/;"	f	class:OpticalFlowManager
args_	face_tracker.h	/^    const Arguments* args_;$/;"	m	class:ugproj::FaceTracker
array_stride	celiu-optflow/image.h	/^  Eigen::Stride<Eigen::Dynamic, DEPTH> array_stride() const {$/;"	f	class:opticalflow::MCImage
asc_meth_t	main.cpp	/^} asc_meth_t;$/;"	t	typeref:enum:__anon1	file:
assoc_method	structure.hpp	/^  AssociationMethod assoc_method;$/;"	m	struct:ugproj::Arguments
assoc_threshold	structure.hpp	/^  double assoc_threshold;$/;"	m	struct:ugproj::Arguments
associate	associator/associator.cpp	/^void FaceAssociator::associate() {$/;"	f	class:FaceAssociator
associate	associator/associator.cpp	/^void KltFaceAssociator::associate() {$/;"	f	class:KltFaceAssociator
base_cast	celiu-optflow/image.h	/^  Eigen::Array<S, DEPTH, SIZE> base_cast() const {$/;"	f	class:opticalflow::MCImage
base_cast	celiu-optflow/image.h	/^  Eigen::Array<S, WIDTH, HEIGHT> base_cast() const {$/;"	f	class:opticalflow::Image
bestFits	associator/associator.hpp	/^    std::vector<Fit> bestFits;$/;"	m	class:ugproj::SiftFaceAssociator
best_fits_	associator/associator.hpp	/^    std::vector< boost::optional<Fit> > best_fits_;$/;"	m	class:ugproj::KltFaceAssociator
box	associator/associator.hpp	/^      cv::Rect box;$/;"	m	struct:ugproj::KltFaceAssociator::Fit
box	associator/associator.hpp	/^      cv::Rect box;$/;"	m	struct:ugproj::SiftFaceAssociator::Fit
calculateOptFlow	main.cpp	/^void calculateOptFlow(Mat& frame1, Mat& frame2, OptFlowArray& vx, OptFlowArray& vy) {$/;"	f
calculateProb	associator/associator.cpp	/^void IntersectionFaceAssociator::calculateProb() {$/;"	f	class:IntersectionFaceAssociator
calculateProb	associator/associator.cpp	/^void KltFaceAssociator::calculateProb() {$/;"	f	class:KltFaceAssociator
calculateProb	associator/associator.cpp	/^void OpticalFlowFaceAssociator::calculateProb() {$/;"	f	class:OpticalFlowFaceAssociator
calculateProb	associator/associator.cpp	/^void SiftFaceAssociator::calculateProb() {$/;"	f	class:SiftFaceAssociator
candidate_iterators	structure.hpp	/^              FaceCandidateList::const_iterator> candidate_iterators() const {$/;"	f	class:ugproj::Face
candidates	structure.hpp	/^    std::vector<FaceCandidate> candidates;$/;"	m	class:ugproj::Face
cascade	detector/detector.hpp	/^            cv::CascadeClassifier& cascade;$/;"	m	class:ugproj::FaceDetector
cascade	file_io.cc	/^cv::CascadeClassifier& FileInput::cascade() {$/;"	f	class:ugproj::FileInput
cascade_	file_io.h	/^    cv::CascadeClassifier cascade_;$/;"	m	class:ugproj::FileInput
cascade_filename	structure.hpp	/^  std::string cascade_filename;$/;"	m	struct:ugproj::Arguments
cast	celiu-optflow/image.h	/^  Image<S, WIDTH, HEIGHT> cast() const {$/;"	f	class:opticalflow::Image
cast	celiu-optflow/image.h	/^  MCImage<S, DEPTH, SIZE> cast() const {$/;"	f	class:opticalflow::MCImage
cmp_point	associator/associator.hpp	/^      bool cmp_point(const cv::Point2d& lhs, const cv::Point2d& rhs) const {$/;"	f	struct:ugproj::KltFaceAssociator::MatchCompare
colidx	celiu-optflow/image.h	/^  const int colidx(int x, int y) const { return x + y * width_; }$/;"	f	class:opticalflow::MCImage
collapse	celiu-optflow/optical_flow.cc	/^void OpticalFlow::collapse(const MCImageDoubleX& in, MCImageDoubleX& out) {$/;"	f	class:opticalflow::OpticalFlow
colorPreset	associator/associator.cpp	/^static cv::Scalar colorPreset[] = {$/;"	v	file:
colorPreset	main.cpp	/^Scalar colorPreset[] = {$/;"	v
color_for	associator/associator.cpp	/^inline cv::Scalar SiftFaceAssociator::color_for(const fc_v::size_type cdd_index) {$/;"	f	class:SiftFaceAssociator
colorwheel	optflow/colorcode.cpp	/^int colorwheel[MAXCOLS][3];$/;"	v
computeBestFitBox	associator/associator.cpp	/^void SiftFaceAssociator::computeBestFitBox(fc_v::size_type queryIdx,$/;"	f	class:SiftFaceAssociator
computeColor	optflow/colorcode.cpp	/^void computeColor(float fx, float fy, uchar *pix)$/;"	f
computeFitBox	associator/associator.cpp	/^bool SiftFaceAssociator::computeFitBox($/;"	f	class:SiftFaceAssociator
computeMatchMask	associator/associator.cpp	/^void SiftFaceAssociator::computeMatchMask(const cv::Rect& beforeRect,$/;"	f	class:SiftFaceAssociator
compute_best_fits	associator/associator.cpp	/^void KltFaceAssociator::compute_best_fits() {$/;"	f	class:KltFaceAssociator
compute_fit_box	associator/associator.cpp	/^bool KltFaceAssociator::compute_fit_box(const cv::Rect& base_rect,$/;"	f	class:KltFaceAssociator
compute_fit_boxes	associator/associator.cpp	/^std::vector<cv::Rect> KltFaceAssociator::compute_fit_boxes($/;"	f	class:KltFaceAssociator
compute_optflow	face_tracker.cc	/^int FaceTracker::compute_optflow($/;"	f	class:ugproj::FaceTracker
convertImg	celiu-optflow/opfl_test.cc	/^void convertImg(MCImageDoubleX& src, MCImageRGB8& dst) {$/;"	f
data	celiu-optflow/image_file.cc	/^  string data;$/;"	m	struct:opticalflow::__anon5::RawImageBuffer	file:
depth	celiu-optflow/image.h	/^  const int depth() const { return 1; }$/;"	f	class:opticalflow::Image
depth	celiu-optflow/image.h	/^  const int depth() const { return this->rows(); }$/;"	f	class:opticalflow::MCImage
desaturate	celiu-optflow/optical_flow.cc	/^void OpticalFlow::desaturate(const MCImageDoubleX& im, MCImageDoubleX& out, ColorType color_type) {$/;"	f	class:opticalflow::OpticalFlow
descA	associator/associator.hpp	/^    cv::Mat descA;$/;"	m	class:ugproj::SiftFaceAssociator
descB	associator/associator.hpp	/^    cv::Mat descB;$/;"	m	class:ugproj::SiftFaceAssociator
detectFaces	detector/detector.cpp	/^void FaceDetector::detectFaces(const Mat& frame, vector<Rect>& rects, const float scale) {$/;"	f	class:FaceDetector
detect_faces	face_tracker.cc	/^int FaceTracker::detect_faces(const temp_idx_t curr_index,$/;"	f	class:ugproj::FaceTracker
detection_scale	structure.hpp	/^  double detection_scale;$/;"	m	struct:ugproj::Arguments
diff_row_	celiu-optflow/image_pyramid.h	/^  ArrayF gaussian_1d_, diff_row_;$/;"	m	class:rvslam::ImagePyramidBuilder
drawRect	main.cpp	/^void drawRect(Mat& frame, Face::id_type id, const Rect& facePosition) {$/;"	f
draw_best_fit	associator/associator.cpp	/^void SiftFaceAssociator::draw_best_fit(const fc_v::size_type cdd_index,$/;"	f	class:SiftFaceAssociator
draw_next_candidates	associator/associator.cpp	/^void SiftFaceAssociator::draw_next_candidates(const fc_v::size_type cdd_index, cv::Mat* next_frame){$/;"	f	class:SiftFaceAssociator
dx	celiu-optflow/optical_flow.cc	/^void OpticalFlow::dx(const MCImageDoubleX& input, MCImageDoubleX& result, bool IsAdvancedFilter) {$/;"	f	class:opticalflow::OpticalFlow
dx_	celiu-optflow/image_pyramid.h	/^  ArrayF gaussian_1d_, dx_;$/;"	m	class:rvslam::ImagePyramid
dxx	celiu-optflow/optical_flow.cc	/^void OpticalFlow::dxx(const MCImageDoubleX& input, MCImageDoubleX& result) {$/;"	f	class:opticalflow::OpticalFlow
dy	celiu-optflow/optical_flow.cc	/^void OpticalFlow::dy(const MCImageDoubleX& input, MCImageDoubleX& result, bool IsAdvancedFilter) {$/;"	f	class:opticalflow::OpticalFlow
dyy	celiu-optflow/optical_flow.cc	/^void OpticalFlow::dyy(const MCImageDoubleX& input, MCImageDoubleX& result) {$/;"	f	class:opticalflow::OpticalFlow
estLaplacianNoise	celiu-optflow/optical_flow.cc	/^void OpticalFlow::estLaplacianNoise(const MCImageDoubleX& Im1, const MCImageDoubleX& Im2, MCImageDoubleX& para) {$/;"	f	class:opticalflow::OpticalFlow
faceId	structure.hpp	/^    face_id_t faceId;$/;"	m	class:ugproj::FaceCandidate
face_id_t	structure.hpp	/^typedef unsigned int face_id_t;$/;"	t	namespace:ugproj
faces	associator/associator.hpp	/^    std::vector<Face>& faces;$/;"	m	class:ugproj::FaceAssociator
faces	main.cpp	/^static vector<Face> faces;$/;"	v	file:
fc_v	associator/associator.hpp	/^    typedef std::vector<FaceCandidate> fc_v;$/;"	t	class:ugproj::FaceAssociator
find_matches	associator/associator.cpp	/^KltFaceAssociator::MatchSet KltFaceAssociator::find_matches($/;"	f	class:KltFaceAssociator
flowHeight	optflow/manager.hpp	/^            int flowHeight;$/;"	m	class:ugproj::OpticalFlowManager
flowManager	associator/associator.hpp	/^    OpticalFlowManager& flowManager;$/;"	m	class:ugproj::OpticalFlowFaceAssociator
flowToColor	optflow/flow_to_color.cpp	/^void ugproj::flowToColor(ugproj::OptFlowArray& vx, ugproj::OptFlowArray& vy,$/;"	f	class:ugproj
flowVect	optflow/manager.hpp	/^            std::vector<flow_t*> flowVect;$/;"	m	class:ugproj::OpticalFlowManager
flowWidth	optflow/manager.hpp	/^            int flowWidth;$/;"	m	class:ugproj::OpticalFlowManager
flow_t	optflow/manager.hpp	/^            typedef std::pair<OptFlowArray*, OptFlowArray*> flow_t;$/;"	t	class:ugproj::OpticalFlowManager
found	structure.hpp	/^  bool found;$/;"	m	struct:ugproj::SparseOptflow
fps	face_tracker.h	/^      double fps;$/;"	m	struct:ugproj::FaceTracker::VideoProperties
frameIndex	structure.hpp	/^    temp_idx_t frameIndex;$/;"	m	class:ugproj::FaceCandidate
frameNumbers	main.cpp	/^static vector<temp_pos_t> frameNumbers;$/;"	v	file:
frame_count	face_tracker.h	/^      unsigned long frame_count;$/;"	m	struct:ugproj::FaceTracker::VideoProperties
frame_height	face_tracker.h	/^      int frame_height;$/;"	m	struct:ugproj::FaceTracker::VideoProperties
frame_size_	associator/associator.hpp	/^    const cv::Size frame_size_;$/;"	m	class:ugproj::KltFaceAssociator
frame_width	face_tracker.h	/^      int frame_width;$/;"	m	struct:ugproj::FaceTracker::VideoProperties
gaussian_1d_	celiu-optflow/image_pyramid.h	/^  ArrayF gaussian_1d_, diff_row_;$/;"	m	class:rvslam::ImagePyramidBuilder
gaussian_1d_	celiu-optflow/image_pyramid.h	/^  ArrayF gaussian_1d_, dx_;$/;"	m	class:rvslam::ImagePyramid
gaussian_1d_kernel	celiu-optflow/image_pyramid.h	/^  const ArrayF& gaussian_1d_kernel() const { return gaussian_1d_; }$/;"	f	class:rvslam::ImagePyramidBuilder
gaussian_sigma_	celiu-optflow/image_pyramid.h	/^  double gaussian_sigma_;$/;"	m	class:rvslam::ImagePyramidBuilder
genInImageMask	celiu-optflow/optical_flow.cc	/^void OpticalFlow::genInImageMask(MCImageDoubleX &mask, const MCImageDoubleX &flow, int interval) {$/;"	f	class:opticalflow::OpticalFlow
genInImageMask	celiu-optflow/optical_flow.cc	/^void OpticalFlow::genInImageMask(MCImageDoubleX& mask, const MCImageDoubleX& vx, const MCImageDoubleX& vy, int interval) {$/;"	f	class:opticalflow::OpticalFlow
getDxs	celiu-optflow/optical_flow.cc	/^void OpticalFlow::getDxs(MCImageDoubleX& imdx, MCImageDoubleX& imdy, MCImageDoubleX& imdt, const MCImageDoubleX& im1, const MCImageDoubleX& im2) {$/;"	f	class:opticalflow::OpticalFlow
getFlowAt	optflow/manager.cpp	/^const cv::Vec2d OpticalFlowManager::getFlowAt(const temp_idx_t startTempIndex,$/;"	f	class:OpticalFlowManager
get_properties	face_tracker.cc	/^void FaceTracker::get_properties(cv::VideoCapture* video,$/;"	f	class:ugproj::FaceTracker
height	celiu-optflow/image.h	/^  const int height() const { return height_; }$/;"	f	class:opticalflow::MCImage
height	celiu-optflow/image.h	/^  const int height() const { return this->cols(); }$/;"	f	class:opticalflow::Image
height	celiu-optflow/image_file.cc	/^  int pixfmt, width, height, pitch;$/;"	m	struct:opticalflow::__anon5::RawImageBuffer	file:
height_	celiu-optflow/image.h	/^  int width_, height_;$/;"	m	class:opticalflow::MCImage
hfiltering	celiu-optflow/optical_flow.cc	/^void OpticalFlow::hfiltering(const MCImageDoubleX& pSrcImage, MCImageDoubleX& pDstImage, int width, int height, int nChannels, const Eigen::ArrayXXd& pfilter1D, int fsize) {$/;"	f	class:opticalflow::OpticalFlow
id	structure.hpp	/^    const id_type id;$/;"	m	class:ugproj::Face
id_type	structure.hpp	/^    typedef face_id_t id_type;$/;"	t	class:ugproj::Face
im2feature	celiu-optflow/optical_flow.cc	/^void OpticalFlow::im2feature(MCImageDoubleX &imfeature, const MCImageDoubleX &im) {$/;"	f	class:opticalflow::OpticalFlow
image	structure.hpp	/^    cv::Mat image;$/;"	m	class:ugproj::FaceCandidate
imfilter_hv	celiu-optflow/optical_flow.cc	/^void OpticalFlow::imfilter_hv(const MCImageDoubleX& input, MCImageDoubleX& result, const Eigen::ArrayXXd& hfilter, int hfsize, const Eigen::ArrayXXd& vfilter, int vfsize) {$/;"	f	class:opticalflow::OpticalFlow
img_pyramid	celiu-optflow/gaussian_pyramid.h	/^  MCImageDoubleX *img_pyramid;$/;"	m	class:opticalflow::GaussianPyramid
imgf	celiu-optflow/image_pyramid.h	/^    ArrayF imgf, imgx, imgy;$/;"	m	struct:rvslam::ImagePyramid::Level
imgx	celiu-optflow/image_pyramid.h	/^    ArrayF imgf, imgx, imgy;$/;"	m	struct:rvslam::ImagePyramid::Level
imgy	celiu-optflow/image_pyramid.h	/^    ArrayF imgf, imgx, imgy;$/;"	m	struct:rvslam::ImagePyramid::Level
init	file_io.cc	/^int FileWriter::init(const Arguments& args) {$/;"	f	class:ugproj::FileWriter
inlier_ratio	associator/associator.hpp	/^      inline double inlier_ratio() const {$/;"	f	struct:ugproj::SiftFaceAssociator::Fit
input_	face_tracker.h	/^    FileInput* input_;$/;"	m	class:ugproj::FaceTracker
intersect	main.cpp	/^    intersect, optflow, sift$/;"	e	enum:__anon1	file:
kGfttMaxCorners	face_tracker.h	/^    static const int kGfttMaxCorners = 100;$/;"	m	class:ugproj::FaceTracker
kIncoming	associator/associator.hpp	/^      kIncoming$/;"	e	enum:ugproj::KltFaceAssociator::MatchPointSelection
kOutgoing	associator/associator.hpp	/^      kOutgoing = 0,$/;"	e	enum:ugproj::KltFaceAssociator::MatchPointSelection
keypointsA	associator/associator.hpp	/^    std::vector<cv::KeyPoint> keypointsA;$/;"	m	class:ugproj::SiftFaceAssociator
keypointsB	associator/associator.hpp	/^    std::vector<cv::KeyPoint> keypointsB;$/;"	m	class:ugproj::SiftFaceAssociator
labeled_faces_	face_tracker.h	/^    std::vector<Face> labeled_faces_;$/;"	m	class:ugproj::FaceTracker
level	celiu-optflow/image_pyramid.h	/^  const Level& level(size_t l) const { return levels_[l]; }$/;"	f	class:rvslam::ImagePyramid
levels_	celiu-optflow/image_pyramid.h	/^  std::vector<Level> levels_;$/;"	m	class:rvslam::ImagePyramid
list_fit_boxes	associator/associator.cpp	/^void SiftFaceAssociator::list_fit_boxes(const vector<cv::DMatch>& matches,$/;"	f	class:SiftFaceAssociator
list_index_pairs	associator/associator.cpp	/^KltFaceAssociator::list_index_pairs(unsigned int size, bool shuffle) {$/;"	f	class:KltFaceAssociator
main	celiu-optflow/image_file_test.cc	/^int main(int argc, char **argv) {$/;"	f
main	celiu-optflow/image_pyramid_test.cc	/^int main(int argc, char **argv) {$/;"	f
main	celiu-optflow/image_test.cc	/^int main(int argc, char **argv) {$/;"	f
main	celiu-optflow/image_util_test.cc	/^int main(int argc, char **argv) {$/;"	f
main	celiu-optflow/opfl_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	lucas_kanade.cc	/^int main(int argc, const char** argv) {$/;"	f
main	main.cpp	/^int main(int argc, const char** argv) {$/;"	f
makecolorwheel	optflow/colorcode.cpp	/^void makecolorwheel()$/;"	f
matchCandidates	associator/associator.cpp	/^void FaceAssociator::matchCandidates() {$/;"	f	class:FaceAssociator
matchDimension	celiu-optflow/optical_flow.cc	/^bool OpticalFlow::matchDimension(const MCImageDoubleX& img, int width, int height, int nchannels) {$/;"	f	class:opticalflow::OpticalFlow
matchDimension	celiu-optflow/optical_flow.cc	/^bool OpticalFlow::matchDimension(const MCImageDoubleX& img1, const MCImageDoubleX& img2) {$/;"	f	class:opticalflow::OpticalFlow
matches	associator/associator.hpp	/^      MatchSet matches;$/;"	m	struct:ugproj::KltFaceAssociator::Fit
matches	associator/associator.hpp	/^      std::vector<cv::DMatch> matches;$/;"	m	struct:ugproj::SiftFaceAssociator::Fit
multiplyWith	celiu-optflow/optical_flow.cc	/^void OpticalFlow::multiplyWith(MCImageDoubleX& image, double ratio) {$/;"	f	class:opticalflow::OpticalFlow
nColorPreset	associator/associator.cpp	/^static const int nColorPreset = sizeof(colorPreset) \/ sizeof(cv::Scalar);$/;"	v	file:
ncols	optflow/colorcode.cpp	/^int ncols = 0;$/;"	v
nextCandidates	associator/associator.hpp	/^    fc_v& nextCandidates;$/;"	m	class:ugproj::FaceAssociator
nextFrame	associator/associator.hpp	/^    const cv::Mat& nextFrame;$/;"	m	class:ugproj::SiftFaceAssociator
nextFramePos	associator/associator.hpp	/^    const temp_idx_t nextFramePos;$/;"	m	class:ugproj::OpticalFlowFaceAssociator
next_frame_	associator/associator.hpp	/^    const cv::Mat& next_frame_;$/;"	m	class:ugproj::KltFaceAssociator
next_index_	associator/associator.hpp	/^    const temp_idx_t next_index_;$/;"	m	class:ugproj::KltFaceAssociator
next_point	structure.hpp	/^  cv::Point2f next_point;$/;"	m	struct:ugproj::SparseOptflow
nlevels	celiu-optflow/gaussian_pyramid.h	/^  inline int nlevels() const { return num_levels; };$/;"	f	class:opticalflow::GaussianPyramid
num_channels	celiu-optflow/image.h	/^  const int num_channels() const { return depth(); }$/;"	f	class:opticalflow::Image
num_channels	celiu-optflow/image.h	/^  const int num_channels() const { return this->rows(); }$/;"	f	class:opticalflow::MCImage
num_inlier	associator/associator.hpp	/^      int num_inlier;$/;"	m	struct:ugproj::SiftFaceAssociator::Fit
num_inliers	associator/associator.hpp	/^      unsigned int num_inliers;$/;"	m	struct:ugproj::KltFaceAssociator::Fit
num_keyp_former	associator/associator.hpp	/^      inline int num_keyp_former() const {$/;"	f	struct:ugproj::SiftFaceAssociator::Fit
num_levels	celiu-optflow/gaussian_pyramid.h	/^  int num_levels;$/;"	m	class:opticalflow::GaussianPyramid
num_levels	celiu-optflow/image_pyramid.h	/^  size_t num_levels() const { return levels_.size(); }$/;"	f	class:rvslam::ImagePyramid
num_levels_	celiu-optflow/image_pyramid.h	/^  size_t num_levels_;$/;"	m	class:rvslam::ImagePyramidBuilder
num_pixels	celiu-optflow/image.h	/^  const int num_pixels() const { return size(); }$/;"	f	class:opticalflow::Image
num_pixels	celiu-optflow/image.h	/^  const int num_pixels() const { return width_ * height_; }$/;"	f	class:opticalflow::MCImage
open	file_io.cc	/^int FileInput::open(const Arguments& args) {$/;"	f	class:ugproj::FileInput
operator ()	associator/associator.hpp	/^      bool operator()(const Match& lhs, const Match& rhs) const {$/;"	f	struct:ugproj::KltFaceAssociator::MatchCompare
operator ()	celiu-optflow/image.h	/^  PixelConstRetType operator()(int x, int y) const { return At(x, y); }$/;"	f	class:opticalflow::MCImage
operator ()	celiu-optflow/image.h	/^  PixelRetType operator()(int x, int y) { return At(x, y); }$/;"	f	class:opticalflow::MCImage
operator ()	celiu-optflow/image.h	/^  Scalar& operator()(int x, int y, int d) { return At(x, y, d); }$/;"	f	class:opticalflow::MCImage
operator ()	celiu-optflow/image.h	/^  const Scalar& operator()(int x, int y, int d) const { return At(x, y, d); }$/;"	f	class:opticalflow::MCImage
operator <<	celiu-optflow/image_test.cc	/^ostream& operator<<(ostream& os, const MCImage<Scalar, DEPTH, SIZE>& img) {$/;"	f	namespace:__anon2
operator =	celiu-optflow/image.h	/^  Image& operator=(const Eigen::Array<Scalar, W, H>& image) {$/;"	f	class:opticalflow::Image
operator =	celiu-optflow/image.h	/^  MCImage& operator=(const MCImage& image) {$/;"	f	class:opticalflow::MCImage
operator []	celiu-optflow/image.h	/^  PixelConstRetType& operator[](int i) const { return At(i); }$/;"	f	class:opticalflow::MCImage
operator []	celiu-optflow/image.h	/^  PixelRetType& operator[](int i) { return At(i); }$/;"	f	class:opticalflow::MCImage
operator []	celiu-optflow/image.h	/^  Scalar& operator[](int i) { return At(i); }$/;"	f	class:opticalflow::Image
operator []	celiu-optflow/image.h	/^  const Scalar& operator[](int i) const { return At(i); }$/;"	f	class:opticalflow::Image
operator []	celiu-optflow/image_pyramid.h	/^  const Level& operator[](size_t l) const { return levels_[l]; }$/;"	f	class:rvslam::ImagePyramid
optflow	main.cpp	/^    intersect, optflow, sift$/;"	e	enum:__anon1	file:
optflows_	associator/associator.hpp	/^    const std::vector<SparseOptflow>& optflows_;$/;"	m	class:ugproj::KltFaceAssociator
opticalflow	celiu-optflow/gaussian_pyramid.cc	/^namespace opticalflow {$/;"	n	file:
opticalflow	celiu-optflow/gaussian_pyramid.h	/^namespace opticalflow {$/;"	n
opticalflow	celiu-optflow/image.h	/^namespace opticalflow {$/;"	n
opticalflow	celiu-optflow/image_file.cc	/^namespace opticalflow {$/;"	n	file:
opticalflow	celiu-optflow/image_file.h	/^namespace opticalflow {$/;"	n
opticalflow	celiu-optflow/image_util.cc	/^namespace opticalflow {$/;"	n	file:
opticalflow	celiu-optflow/image_util.h	/^namespace opticalflow {$/;"	n
opticalflow	celiu-optflow/optical_flow.cc	/^namespace opticalflow {$/;"	n	file:
opticalflow	celiu-optflow/optical_flow.h	/^namespace opticalflow {$/;"	n
output_dir	structure.hpp	/^  std::string output_dir;$/;"	m	struct:ugproj::Arguments
output_path_	file_io.h	/^    boost::filesystem::path output_path_;$/;"	m	class:ugproj::FileWriter
parseOptions	main.cpp	/^bool parseOptions(int argc, const char** argv,$/;"	f
parse_args	lucas_kanade.cc	/^bool parse_args(int argc, const char** argv, ugproj::Arguments* args) {$/;"	f
pitch	celiu-optflow/image_file.cc	/^  int pixfmt, width, height, pitch;$/;"	m	struct:opticalflow::__anon5::RawImageBuffer	file:
pixfmt	celiu-optflow/image_file.cc	/^  int pixfmt, width, height, pitch;$/;"	m	struct:opticalflow::__anon5::RawImageBuffer	file:
prevCandidates	associator/associator.hpp	/^    const fc_v& prevCandidates;$/;"	m	class:ugproj::FaceAssociator
prevFrame	associator/associator.hpp	/^    const cv::Mat& prevFrame;$/;"	m	class:ugproj::SiftFaceAssociator
prevFramePos	associator/associator.hpp	/^    const temp_idx_t prevFramePos;$/;"	m	class:ugproj::OpticalFlowFaceAssociator
prev_point	structure.hpp	/^  cv::Point2f prev_point;$/;"	m	struct:ugproj::SparseOptflow
prob	associator/associator.hpp	/^    double **prob;$/;"	m	class:ugproj::FaceAssociator
rect	structure.hpp	/^    cv::Rect rect;$/;"	m	class:ugproj::FaceCandidate
resize	celiu-optflow/image.h	/^  void resize(int width, int height, int depth = DEPTH) {$/;"	f	class:opticalflow::MCImage
resized_image	structure.cpp	/^cv::Mat FaceCandidate::resized_image(int size) const {$/;"	f	class:FaceCandidate
result_cnt	associator/associator.cpp	/^int result_cnt = 0;$/;"	v
rvslam	celiu-optflow/image_pyramid.h	/^namespace rvslam {$/;"	n
set_args	face_tracker.cc	/^int FaceTracker::set_args(const Arguments* args) {$/;"	f	class:ugproj::FaceTracker
set_input	face_tracker.cc	/^int FaceTracker::set_input(FileInput* input) {$/;"	f	class:ugproj::FaceTracker
set_writer	face_tracker.cc	/^int FaceTracker::set_writer(const FileWriter* writer) {$/;"	f	class:ugproj::FaceTracker
setcols	optflow/colorcode.cpp	/^void setcols(int r, int g, int b, int k)$/;"	f
sift	main.cpp	/^    intersect, optflow, sift$/;"	e	enum:__anon1	file:
size	celiu-optflow/image.h	/^  const int size() const { return width() * height(); }$/;"	f	class:opticalflow::Image
size	celiu-optflow/image.h	/^  const int size() const { return width_ * height_; }$/;"	f	class:opticalflow::MCImage
subtract	celiu-optflow/optical_flow.cc	/^void OpticalFlow::subtract(MCImageDoubleX& img1, MCImageDoubleX& img2, MCImageDoubleX& result) {$/;"	f	class:opticalflow::OpticalFlow
swap	celiu-optflow/image.h	/^  void swap(MCImage* image) {$/;"	f	class:opticalflow::MCImage
target_fps	structure.hpp	/^  double target_fps;$/;"	m	struct:ugproj::Arguments
temp_idx_t	structure.hpp	/^typedef unsigned long temp_idx_t;$/;"	t	namespace:ugproj
temp_pos_t	main.cpp	/^typedef unsigned long temp_pos_t;$/;"	t	file:
threshold	associator/associator.hpp	/^    double threshold;$/;"	m	class:ugproj::FaceAssociator
track	face_tracker.cc	/^int FaceTracker::track(std::vector<unsigned long>* tracked_positions) {$/;"	f	class:ugproj::FaceTracker
track_frame	face_tracker.cc	/^int FaceTracker::track_frame($/;"	f	class:ugproj::FaceTracker
uchar	optflow/colorcode.cpp	/^typedef unsigned char uchar;$/;"	t	file:
ugproj	associator/associator.hpp	/^namespace ugproj {$/;"	n
ugproj	detector/detector.hpp	/^namespace ugproj {$/;"	n
ugproj	face_tracker.cc	/^namespace ugproj {$/;"	n	file:
ugproj	face_tracker.h	/^namespace ugproj {$/;"	n
ugproj	file_io.cc	/^namespace ugproj {$/;"	n	file:
ugproj	file_io.h	/^namespace ugproj {$/;"	n
ugproj	optflow/flow_to_color.hpp	/^namespace ugproj {$/;"	n
ugproj	optflow/manager.hpp	/^namespace ugproj {$/;"	n
ugproj	structure.hpp	/^namespace ugproj {$/;"	n
valid	associator/associator.hpp	/^      bool valid() const {$/;"	f	struct:ugproj::KltFaceAssociator::Fit
vfiltering	celiu-optflow/optical_flow.cc	/^void OpticalFlow::vfiltering(const MCImageDoubleX& pSrcImage, MCImageDoubleX& pDstImage, int width, int height, int nChannels, const Eigen::ArrayXXd& pfilter1D, int fsize) {$/;"	f	class:opticalflow::OpticalFlow
video	file_io.cc	/^cv::VideoCapture& FileInput::video() {$/;"	f	class:ugproj::FileInput
video_	file_io.h	/^    cv::VideoCapture video_;$/;"	m	class:ugproj::FileInput
video_filename	structure.hpp	/^  std::string video_filename;$/;"	m	struct:ugproj::Arguments
visualize	associator/associator.cpp	/^void SiftFaceAssociator::visualize(cv::Mat& img) {$/;"	f	class:SiftFaceAssociator
warpFL	celiu-optflow/optical_flow.cc	/^void OpticalFlow::warpFL(MCImageDoubleX& warpIm2, const MCImageDoubleX& Im1, const MCImageDoubleX& Im2, const MCImageDoubleX& vx, const MCImageDoubleX& vy) {$/;"	f	class:opticalflow::OpticalFlow
width	celiu-optflow/image.h	/^  const int width() const { return this->rows(); }$/;"	f	class:opticalflow::Image
width	celiu-optflow/image.h	/^  const int width() const { return width_; }$/;"	f	class:opticalflow::MCImage
width	celiu-optflow/image_file.cc	/^  int pixfmt, width, height, pitch;$/;"	m	struct:opticalflow::__anon5::RawImageBuffer	file:
width_	celiu-optflow/image.h	/^  int width_, height_;$/;"	m	class:opticalflow::MCImage
write_frame	face_tracker.cc	/^int FaceTracker::write_frame($/;"	f	class:ugproj::FaceTracker
write_image	file_io.cc	/^int FileWriter::write_image(const cv::Mat& image,$/;"	f	class:ugproj::FileWriter
write_tracklet	face_tracker.cc	/^int FaceTracker::write_tracklet($/;"	f	class:ugproj::FaceTracker
writer_	face_tracker.h	/^    const FileWriter* writer_;$/;"	m	class:ugproj::FaceTracker
~FaceAssociator	associator/associator.hpp	/^    virtual ~FaceAssociator() {$/;"	f	class:ugproj::FaceAssociator
~GaussianPyramid	celiu-optflow/gaussian_pyramid.cc	/^GaussianPyramid::~GaussianPyramid(void) {$/;"	f	class:opticalflow::GaussianPyramid
~ImagePyramid	celiu-optflow/image_pyramid.h	/^  ~ImagePyramid() {}$/;"	f	class:rvslam::ImagePyramid
~ImagePyramidBuilder	celiu-optflow/image_pyramid.h	/^  ~ImagePyramidBuilder() {}$/;"	f	class:rvslam::ImagePyramidBuilder
~OpticalFlow	celiu-optflow/optical_flow.h	/^  ~OpticalFlow() {}$/;"	f	class:opticalflow::OpticalFlow
~OpticalFlowManager	optflow/manager.cpp	/^OpticalFlowManager::~OpticalFlowManager() {$/;"	f	class:OpticalFlowManager
